In the given question consider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1).
Find all possible paths that the rat can take to reach from source to destination.
The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right).
Value 0 at a cell in the matrix represents that it is blocked and rat cannot move to it while value 1
at a cell in the matrix represents that rat can be travel through it.
Note: In a path, no cell can be visited more than one time. If the source cell is 0, the rat cannot move to any other cell.

Example 1:

Input:
N = 4
m[][] = {{1, 0, 0, 0},
         {1, 1, 0, 1}, 
         {1, 1, 0, 0},
         {0, 1, 1, 1}}
Output:
DDRDRR DRDDRR

Explanation:
The rat can reach the destination at 
(3, 3) from (0, 0) by two paths - DRDDRR 
and DDRDRR, when printed in sorted order 
we get DDRDRR DRDDRR.

Example 2:
Input:
N = 2
m[][] = {{1, 0},
         {1, 0}}
         
Output:
-1

Explanation:
No path exists and destination cell is 
blocked.
Your Task:  
You don't need to read input or print anything. 
Complete the function printPath() which takes N and 2D array m[ ][ ] as input parameters and returns the list of paths in lexicographically increasing order. 

In this question starting from making a function maze in which i have passed a array a[][], int r for row, int c for column, int find for finding the destination
cell in the maze & boolean visited[][], visited is the array which i have created for marking the cell which has already been visited so that we should not visit
it again if we have visited once, 7 with that created one isValid() function for checking that whatever operation is being performed it is been performed 
inside that maze, it's not exceeding base condition.
inside isValid function
int rows = a.length;
		int cols = a[0].length;
		return r >= 0 && r < rows && c >= 0 && c < cols && !visited[r][c];
Now, inside maze function checking for if(!isValid(a,r,c,visited)) means if it is not valid then return false;
Then checks for the element of array == find, then return true.
Otherwise checks for 1 i.e. element of array a[r][c] == 1 do visited is equal to true so that cell should be marked visited.
Then perform down, right, left, up & with the help of code given in .java file of this question checks possibility for the path.
After that again do visited is equal to false for the rest of upcoming cell, 7 return down || right || left || up for which so ever works for the path.
And after that returns false if any of the above if condition does not satisfied.

In the main method initialized a 2-D array & checks if condition for maze() function, if it is valid printed destination cell "found", if not then "not found".
Destination cell can be (n-1 x n-1) or anything.
