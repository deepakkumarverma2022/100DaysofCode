In this question you are given a recursion based problem name Matrix Flood Fill. 
Given a 2D screen arr[][] where each arr[i][j] is an integer representing the color of that pixel,
also given the location of a pixel (X, Y) and a color C, the task is to replace the color of the given pixel and all the adjacent same-colored pixels with the given color.

Sample Input :
arr[][] = { 
{1, 1, 1, 1, 1, 1, 1, 1}, 
{1, 1, 1, 1, 1, 1, 0, 0}, 
{1, 0, 0, 1, 1, 0, 1, 1}, 
{1, 2, 2, 2, 2, 0, 1, 0}, 
{1, 1, 1, 2, 2, 0, 1, 0}, 
{1, 1, 1, 2, 2, 2, 2, 0}, 
{1, 1, 1, 1, 1, 2, 1, 1}, 
{1, 1, 1, 1, 1, 2, 2, 1}} 
X = 4, Y = 4, C = 3 

Sample Output :
1 1 1 1 1 1 1 1 
1 1 1 1 1 1 0 0 
1 0 0 1 1 0 1 1 
1 3 3 3 3 0 1 0 
1 1 1 3 3 0 1 0 
1 1 1 3 3 3 3 0 
1 1 1 1 1 3 1 1 
1 1 1 1 1 3 3 1 

Explanation :
The values in the given 2D screen indicate colors of the pixels. 
X and Y are coordinates of the brush, C is the color that should replace the previous color on screen[X][Y] and all surrounding pixels with the same color. 
Hence all the 2 are replaced with 3. 

In this question created two function i.e. floodFill & printMatrix in flooFill function we have passed five parameter i.e. array a[][], r for row, c for column,
toFill is for the colour or digits that should be fill & prevFill is for the colour or digits that has been filled already, then taken the length of the rows & column
using array.length & array[0].length, then written the base condition r < 0 || r >= rows || c < 0 || c >= cols, so that should not go out of the matrix.
if it is this then return nothing, & also array element != previous element means it is equal to new element so we have not to update it.
Then also return nothing & now this time element of the array will equal to previous element so we will update it colour with new digits i.e. doing a recursive
call for all the four direction down, right, left & up, it will colour with toFill new digits whatever you provide to all it's connected member with digits
earlier. After the closing of floodFill function we have made a printMatrix function for printing the array element for that again store length of the array using
rows & column & then runs a for loop & with the help of this print the updated array, & call it inside main function i.e. both the function you have created.
& also initialize the 2D-array for the operation to be done & that's it you are done.
